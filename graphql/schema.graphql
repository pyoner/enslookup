type Domain @entity {
  id: ID! # The namehash of the name
  name: String # The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  labelName: String # The human readable label name (imported from CSV), if known
  labelhash: Bytes # keccak256(labelName)
  parent: Domain # The namehash (id) of the parent name
  subdomains: [Domain!]! @derivedFrom(field: "parent") # Can count domains from length of array
  resolvedAddress: Account # Address logged from current resolver, if any
  owner: Account!
  resolver: Resolver
  ttl: BigInt
  isMigrated: Boolean!
  events: [DomainEvent!]! @derivedFrom(field: "domain")
}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
}

type Transfer implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type NewOwner implements DomainEvent @entity {
  id: ID!
  parentDomain: Domain!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type NewResolver implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  resolver: Resolver!
}

type NewTTL implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  ttl: BigInt!
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
  registrations: [Registration!] @derivedFrom(field: "registrant")
}

type Registration @entity {
  id: ID!
  domain: Domain
  registrationDate: BigInt!
  expiryDate: BigInt!
  cost: BigInt
  registrant: Account!
  labelName: String
  events: [RegistrationEvent!]! @derivedFrom(field: "registration")
}

interface RegistrationEvent {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
}

type NameRegistered implements RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  registrant: Account!
  expiryDate: BigInt!
}

type NameRenewed implements RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  expiryDate: BigInt!
}

type NameTransferred implements RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  newOwner: Account!
}

type Resolver @entity {
  id: ID! # Concatenation of resolver address and namehash
  domain: Domain
  address: Bytes! # Address of resolver contract
  addr: Account # Current value of addr record (per events)
  contentHash: Bytes # Content hash, in binary format.
  texts: [String!] # Set of observed text record keys
  coinTypes: [Int!] # Set of observed SLIP-44 coin types
  events: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

interface ResolverEvent {
  id: ID! # Concatenation of block number and log ID
  resolver: Resolver! # Used to derive relationships to Resolvers
  blockNumber: Int!
  transactionID: Bytes!
}

type AddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  addr: Account!
}

type MulticoinAddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  coinType: Int!
  addr: Bytes!
}

type NameChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  name: String!
}

type AbiChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  contentType: BigInt!
}

type PubkeyChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  x: Bytes!
  y: Bytes!
}

type TextChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  key: String!
}

type ContenthashChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  hash: Bytes!
}

type InterfaceChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  interfaceID: Bytes!
  implementer: Bytes!
}

type AuthorisationChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Bytes!
  target: Bytes!
  isAuthorized: Boolean!
}
